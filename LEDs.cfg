[gcode_macro _led_init]
variable_colour_map: {
  'B': {'led': 'blue_pin' },
  'G': {'led': 'green_pin' },
  'R': {'led': 'red_pin' },
  'W': {'led': 'white_pin' }
  }

gcode:
  {% set leds = {} %}
  {% set states = {} %}
  {% set settings = printer.configfile.settings %}
  {% set colour_map = printer['gcode_macro _led_init'].colour_map %}
  {% for setting in printer %}      
    {% set a = setting.split() %}
    {% if a[0] in ('neopixel', 'led') %}
      {% set name = a[1] %}
      # { action_respond_info('Found Light: %s -> %s' % (a[1], setting)) }
      {% set dummy = leds.__setitem__(name, {'setting' : setting, 'states' : {}, 'colours': []})  %}
      {% if a[0] in ('neopixel') %}
        {% set c = settings[setting|lower()].color_order[0]|list|sort() %}
        # { action_respond_info('%s Colours: %s' % (a[1], c)) }
        {% set dummy = leds[name]['colours'].extend(c)  %}
      {% elif a[0] in ('led') %}
        # { action_respond_info('LED: %s -> %s' % (a[1], settings[setting])) }
        {% for c in colour_map %}
          # { action_respond_info('LED: %s check for %s' % (c, colour_map[c].led)) }
          {% if colour_map[c].led in settings[setting] %}
            { action_respond_info('%s Colour %s found -> %s' % (a[1], c, settings[setting][colour_map[c].led])) }
            {% set dummy = leds[name]['colours'].extend(c)  %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% endif %}
  {% endfor %}
  # { action_respond_info('current leds -> %s' % (leds)) }

  {% set km_states = printer['gcode_macro _km_globals'].led_states %}
  {% for state in printer["gcode_macro _km_print_status"].status_list %}
    {% set dummy = states.__setitem__(state, {} ) %}
  {% endfor %}

  {% for led in km_states %}      
    {% set led_cfg = km_states[led] %}
    {% if 'default' in led_cfg %}
      {% for state in printer["gcode_macro _km_print_status"].status_list %}      
        {% set dummy = states[state].__setitem__(led, led_cfg['default']) %}
      {% endfor %}
    {% set dummy = led_cfg.pop('default') %}
    {% endif %}

    {% for state in led_cfg %}      
      
      # { action_respond_info('%s Adding stateinfo for %s -> %s' % (led, state, led_cfg[state])) }
      {% set dummy = states[state].__setitem__(led, led_cfg[state]) %}
    {% endfor %}
  {% endfor %}

  # Keep for further use :)
  SET_GCODE_VARIABLE MACRO=_LED_DATA VARIABLE=leds VALUE="{leds}"
  SET_GCODE_VARIABLE MACRO=_LED_DATA VARIABLE=states VALUE="{states}"

[gcode_macro _LED_DATA]
variable_leds: {}
variable_states: {}
variable_colournames = {'W': 'WHITE', 'G': 'GREEN', 'R': 'RED', 'B': 'BLUE'}
gcode:



[gcode_macro led_set_by_state]
gcode:
  # init variables
  {% set cm = printer["gcode_macro _LED_DATA"].colournames %}
  {% set leds = printer['gcode_macro _LED_DATA'].leds %}
  {% set states = printer['gcode_macro _LED_DATA'].states %}
  {% set led_colours = printer['gcode_macro _km_globals'].led_colours %}

  # parse params
  {% set next_state = params.NEXT_STATE|default('none')|lower() %}
  {% set last_state = params.LAST_STATE|default('none')|lower() %}

  # annoy audience
  # RESPOND PREFIX="// leds_set_by_state //" msg="{'next_state = %s' % (next_state)} "



  {% for led in states[next_state] %}
    {% set next_info = states[next_state][led] %}
    {% set colour = led_colours[leds[led].colours|join("")][next_info.colour] %}
    # RESPOND PREFIX="// leds_set_by_state //" msg="{'next_info = %s, colour = %s' % (next_info, colour) }"
    {% set led_args = ['LED=%s' % led] %}
    {% for i in colour %}
      {% set dummy = led_args.append('%s=%f' % (cm[i], (colour[i] * (next_info.dimm|default(1.0))))) %}
    {% endfor %}
    {% set dummy = led_args.append('transmit=%i' % (1)) %}
    # RESPOND PREFIX="// leds_set_by_state //" msg="{'led_args = %s' % (led_args|join(' ')) }"
    {'SET_LED %s' % (led_args|join(' '))}
  {% endfor %}

[gcode_macro leds_state_wrapper]
gcode:
#SET_LEDS_BY_NAME rawparams: TYPE=ENTER WHEN=IDLE LAST_STATUS=homing NEXT_STATUS=ready, warehouse|off -> {'colour': 'off'}}
  # RESPOND PREFIX="// leds_state_wrapper" msg="rawparams: {rawparams}"

  {% set next_state = params.NEXT_STATUS|default('none') %}
  {% set last_state = params.LAST_STATUS|default('none') %}

  { 'led_set_by_state NEXT_STATE=%s LAST_STATE=%s' % (next_state, last_state) }    


[gcode_macro leds_state_wrapper_register]
gcode:
      gcode_on_print_status status={printer["gcode_macro _km_print_status"].status_list|join(",")} type=enter command=leds_state_wrapper args=1 when=always

