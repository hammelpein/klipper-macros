[gcode_macro _led_dbg]
gcode:
gcode:
  {% set cfg_lvl = printer["gcode_macro _km_globals"].led_debug|default(1)|int %}

  {% set lvl = params.LVL|default(0)|int %}
  {% set pfx = params.PFX|default("// LED")|string %}
  {% set msg = params.MSG|default("hello world")|string %}

  {% if lvl <= cfg_lvl %}
    RESPOND PREFIX="{pfx}" msg="{msg}"
  {% endif %}

[gcode_macro _led_init]
variable_colour_map: {
  'B': {'led': 'blue_pin' },
  'G': {'led': 'green_pin' },
  'R': {'led': 'red_pin' },
  'W': {'led': 'white_pin' }
  }

gcode:
  {% set leds = {} %}
  {% set states = {} %}
  {% set settings = printer.configfile.settings %}
  {% set colour_map = printer['gcode_macro _led_init'].colour_map %}
  {% for setting in printer %}      
    {% set a = setting.split() %}
    {% if a[0] in ('neopixel', 'led') %}
      {% set name = a[1] %}
      _LED_DBG LVL=1 MSG="{'Found Light: %s -> %s' % (a[1], setting)}"
      {% set dummy = leds.__setitem__(name, {'setting' : setting, 'states' : {}, 'colours': []})  %}
      {% if a[0] in ('neopixel') %}
        {% set c = settings[setting|lower()].color_order[0]|list|sort() %}
        _LED_DBG LVL=2 MSG="{'%s Colours: %s' % (a[1], c) }"
        {% set dummy = leds[name]['colours'].extend(c)  %}
      {% elif a[0] in ('led') %}
        _LED_DBG LVL=2 MSG="{'LED: %s -> %s' % (a[1], settings[setting])}"
        {% for c in colour_map %}
          _led_dbg # { action_respond_info('LED: %s check for %s' % (c, colour_map[c].led)) }
          {% if colour_map[c].led in settings[setting] %}
            _LED_DBG LVL=2 MSG="{'%s Colour %s found -> %s' % (a[1], c, settings[setting][colour_map[c].led])}"
            {% set dummy = leds[name]['colours'].extend(c)  %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% endif %}
  {% endfor %}
  _LED_DBG LVL=1 MSG="{'current leds -> %s' % (leds) }"

  {% set km_states = printer['gcode_macro _km_globals'].led_states %}
  {% for state in printer["gcode_macro _km_print_status"].status_list %}
    {% set dummy = states.__setitem__(state, {} ) %}
  {% endfor %}

  {% for led in km_states %}      
    {% set led_cfg = km_states[led] %}
    {% if 'default' in led_cfg %}
      {% for state in printer["gcode_macro _km_print_status"].status_list %}      
        {% set dummy = states[state].__setitem__(led, led_cfg['default']) %}
      {% endfor %}
    {% set dummy = led_cfg.pop('default') %}
    {% endif %}

    {% for state in led_cfg %}      
      
      _LED_DBG LVL=2 MSG="{'%s Adding stateinfo for %s -> %s' % (led, state, led_cfg[state])}"
      # { action_respond_info('%s Adding stateinfo for %s -> %s' % (led, state, led_cfg[state])) }
      {% set dummy = states[state].__setitem__(led, led_cfg[state]) %}
    {% endfor %}
  {% endfor %}

  # Keep for further use :)
  SET_GCODE_VARIABLE MACRO=_LED_DATA VARIABLE=leds VALUE="{leds}"
  SET_GCODE_VARIABLE MACRO=_LED_DATA VARIABLE=states VALUE="{states}"
  gcode_on_print_status status={printer["gcode_macro _km_print_status"].status_list|join(",")} type=enter command=led_set_by_state args=1 when=always


[gcode_macro _LED_DATA]
variable_leds: {}
variable_states: {}
variable_colournames = {'W': 'WHITE', 'G': 'GREEN', 'R': 'RED', 'B': 'BLUE'}
gcode:



[gcode_macro led_set_by_state]
gcode:
	# init variables
	{% set cm = printer["gcode_macro _LED_DATA"].colournames %}
	{% set leds = printer['gcode_macro _LED_DATA'].leds %}
	{% set states = printer['gcode_macro _LED_DATA'].states %}
	{% set led_colours = printer['gcode_macro _km_globals'].led_colours %}
	{% set effects = printer['gcode_macro _km_globals'].led_effects %}

  	# parse params
	{% set next_state = params.NEXT_STATUS|default('none')|lower() %}
	{% set last_state = params.LAST_STATUS|default('none')|lower() %}

	_LED_DBG LVL=1 msg="{'last_state = %s, next_state = %s' % (last_state, next_state) }"

	{% if effects|length() %} # and 'gcode_macro stop_led_effects' in printer ## this doesn't work!
		{% set next_effects = effects[params.NEXT_STATUS|lower()]|list if params.NEXT_STATUS else () %}
		{% set last_effects = effects[params.LAST_STATUS|lower()]|list if params.LAST_STATUS else () %}


		_LED_DBG LVL=2 msg="{'last_effects = %s, next_effects = %s' % (last_effects, next_effects) }"

		{% if last_effects|length() and next_effects|length() %}
    			{% set common_effects = next_effects|select('in', last_effects)|list %}
    			{% for effect in common_effects %}
      				{% set dummy = next_effects.remove(effect) %}
      				{% set dummy = last_effects.remove(effect) %}
			{% endfor %}
			#{% for effect in last_effects %}
			#	RESPOND PREFIX="// leds_set_by_state //" msg="{'STOP_LED_EFFECTS EFFECT=%s' % (effect) }"
			#	{'STOP_LED_EFFECTS EFFECT=%s' % (effect) }
			#{% endfor %}
		{% else %}
			_LED_DBG LVL=2 msg="Stopping all led_effects"
			STOP_LED_EFFECTS
		{% endif %}
		{% for effect in next_effects %}
			_LED_DBG LVL=2 msg="{'SET_LED_EFFECT EFFECT=%s' % (effect) }"
			{% set LED_CMD='SET_LED_EFFECT EFFECT=%s REPLACE=1' % (effect)%}
			_LED_DBG LVL=2 msg="{'execute: %s' % (LED_CMD) }"
			{LED_CMD}
  		{% endfor %}
	{% endif %}
	# let's go
	{% for led in states[next_state] %}
		{% set next_info = states[next_state][led] %}
		{% set colour = led_colours[leds[led].colours|join("")][next_info.colour] %}
		_LED_DBG LVL=1 msg="{'next_info = %s, colour = %s' % (next_info, colour) }"
		{% set led_args = ['LED=%s' % led] %}
		{% for i in colour %}
			{% set dummy = led_args.append('%s=%f' % (cm[i], (colour[i] * (next_info.dimm|default(1.0))))) %}
		{% endfor %}
		{% set dummy = led_args.append('transmit=%i' % (1)) %}
		_LED_DBG LVL=1 msg="{'led_args = %s' % (led_args|join(' ')) }"
		{'SET_LED %s SYNC=0' % (led_args|join(' '))}
	{% endfor %}



