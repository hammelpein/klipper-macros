



[gcode_macro m1041]
description: Sets chamber temperature.
  Usage: M141 [S<temp>]
variable_chamber_cfg: {
    "ctl": {
    #  "Chamber": { "type": "temperature_fan", "mult": 1.0, "offset": 0.0 },
    },
    "helpers": {
      "heater_bed": { "mult": 1.0, "offset": 0.0 },
    },
    "sensor": {"name": "temperature_sonsor chamber", },
  }
gcode:
  {% set TARGET = params.S|default(0.0)|float %}
  {% set cfg = printer["gcode_macro m1041"].chamber_cfg %}

  RESPOND PREFIX="// M141 //" msg="Setting targets"
  {% for c in cfg.ctl %}
    {% set t = TARGET * cfg.ctl[c].mult|default(1.0)|float +
      cfg.ctl[c].offset|default(0.0)|float %}
    {% set cmd = 'SET_%s_TARGET' % cfg.ctl[c].type|string|upper %}
    RESPOND PREFIX="// M141 //" msg="{'%s -> %f°C using %s' % (c, t, cmd)}"
    # {cmd} {cfg.ctl[c].type|string|upper}={c} TARGET={t}
  {% endfor %}


[gcode_macro m1091]
description: Sets chamber temperature (with wait for heating).
  Usage: M191 [S<temp>]
gcode:
  # Just fake the R parameter for the chamber.
  {% if "R" in params %}
    {% set dummy = params.__setitem__("S", params.R) %}
  {% endif %}
  _KM_PRINT_STATUS ACTION=PUSH_STATUS
  _KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating

  {% set TARGET = params.S|default(0.0)|float %}
  {% set cfg = printer["gcode_macro m1041"].chamber_cfg %}
  {% set temps = [] %}
  {% for c in cfg.ctl %}
    {% set t = TARGET * cfg.ctl[c].mult|default(1.0)|float +
      cfg.ctl[c].offset|default(0.0)|float %}
    {% set cmd = 'SET_%s_TARGET' % cfg.ctl[c].type|string|upper %}
    RESPOND PREFIX="// M141 //" msg="{'%s -> %f°C using %s' % (c, t, cmd)}"
   # {cmd} {cfg.ctl[c].type|string|upper}={c} TARGET={t}
    {% if "heater" in cfg.ctl[c].type|string|upper %}
      RESPOND PREFIX="// M141 //" msg="{'%s is a heater' % (c)}"
      {% set dummy = temps.append(t) %}
      
    {% endif %}
  {% endfor %}
  
  RESPOND PREFIX="// M141 //" msg="{'temps = %s' % (temps)}"

  {% for helper_name in cfg.helpers %}
    {% set helper = cfg.helpers[helper_name] %}
    {% set t = printer[helper_name].target * helper.mult|default(1.0)|float +
      helper.offset|default(0.0)|float %}
      RESPOND PREFIX="// M141 //" msg="{'helper %s supports up to %f°C' % (helper_name, t)}"

      {% set dummy = temps.append(t) %}

  {% endfor %}

  RESPOND PREFIX="// M141 //" msg="{'temps = %s -> %f' % (temps, temps|max)}"

  {% if temps|max >= TARGET %}
    temperature_wait SENSOR="{cfg.sensor.name}" MINIMUM={(params.S|default(10)|float) - 10}
  {% else %}
    RESPOND PREFIX="// M191 //" msg="IGNORED as max supported temp too low"

  {% endif %}
  #  _GCODE_WAIT_WRAPPER HEATER=chamber {%
  #    for k in params %}{' '~k~'="'~params[k]~'"'}{% endfor %}
  _KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status
