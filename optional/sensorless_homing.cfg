################################################################################
####    sensorless_homimg.cfg
####
################################################################################
####    * Should be fairly machine independent
####	  * init code needs rework
####	  * check_z function same
####


[gcode_macro _HOME_DATA]
variable_init: False
variable_config: {}
gcode:


[homing_override]
axes: xyz
#set_position_z: 0
gcode:

  
  {% set cfg = printer["gcode_macro _HOME_DATA"].config %} 
  {% set axes = 'XYZ'|select('in', params|upper)|list %}
  RESPOND PREFIX="// homing_override" msg="{'axes: %s, cfg: %s' % (axes, cfg)}"

  {% if 'z' not in printer.toolhead.homed_axes|list and 'Z' not in axes and ('X' or 'Y' in axes) %}
    RESPOND PREFIX="// homing_override" msg="Adding Z Axis!"
    {% set dummy = axes.append('Z') %}
  {% endif %}

  {% if not printer["gcode_macro _HOME_DATA"].init %}
    RESPOND PREFIX="// homing_override" msg="INIT REQUIRED"

    {% for name in printer.configfile.settings %}
      {% if 'tmc' in name|lower%}
        {% if 'stepper_x' in name|lower %}
          {% set cfg_x = dict() %} 
          {% set dummy = cfg_x.update({"run_current": printer.configfile.settings[name].run_current}) %} 
          {% set dummy = cfg_x.update({"home_current": printer.configfile.settings[name].run_current * 0.7} ) %} 
          {% set dummy = cfg_x.update({"delay": printer['gcode_macro _km_globals'].homing_delay|float} ) %} 
          {% set dummy = cfg_x.update({"retract": printer['gcode_macro _km_globals'].homing_retract|float} ) %} 
          {% set dummy = cfg.update({"x": cfg_x}) %} 
        {% endif %}
        {% if 'stepper_y' in name|lower%}
          {% set cfg_y = dict() %} 
          {% set dummy = cfg_y.update({"run_current": printer.configfile.settings[name].run_current}) %} 
          {% set dummy = cfg_y.update({"home_current": printer.configfile.settings[name].run_current * 0.7} ) %} 
          {% set dummy = cfg_y.update({"delay": printer['gcode_macro _km_globals'].homing_delay|float} ) %} 
          {% set dummy = cfg_y.update({"retract": printer['gcode_macro _km_globals'].homing_retract|float} ) %} 
          {% set dummy = cfg.update({"y": cfg_y}) %} 
        {% endif %}

      {% endif %}
    {% endfor %}
    SET_GCODE_VARIABLE MACRO=_HOME_DATA VARIABLE=config VALUE="{cfg}"
    SET_GCODE_VARIABLE MACRO=_HOME_DATA VARIABLE=init VALUE="True"
    RESPOND PREFIX="// homing_override" msg="{'cfg => %s' % (cfg)}"

  {% endif %}

  {% if 'Z' in axes %}
    RESPOND PREFIX="// homing_override" msg="Z Axis is requested"
    G28.6245197 Z
    G91												# Relative
    G1 Z-{printer.configfile.settings['stepper_z'].homing_retract_dist|default(5.0)|float}	# Move away
    G90 											# Absolute
  {% endif %}

  {% if 'X' in axes or 'Y' in axes %}
    {% for stepper in cfg %}
      RESPOND PREFIX="// homing_override" msg="{'setting stepper_%s current' % (stepper)}"
      SET_TMC_CURRENT STEPPER="stepper_{stepper}" CURRENT={cfg[stepper].home_current}
    {% endfor %}
    _CHECK_Z


    {% for i in 'XY'|select('in', axes)|list %}
      RESPOND PREFIX="// homing_override" msg="HOMING {i}"
      G28.6245197 {i}						# Home current Axes
      G91 							# Relative
      G1 {i}-{cfg[i|lower].retract}				# Move away
      G4 P{cfg[i|lower].delay * 1000} 				# Wait for stallguard to clear
      G90 							# Absolute
    {% endfor %}

    {% for stepper in cfg %}
      RESPOND PREFIX="// homing_override" msg="{'setting stepper_%s current' % (stepper)}"
      SET_TMC_CURRENT STEPPER="stepper_{stepper}" CURRENT={cfg[stepper].run_current}
    {% endfor %}

  {% endif %}


