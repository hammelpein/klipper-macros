[gcode_macro _HOME_DATA]
variable_init: False
variable_sensorless_axes: ()
variable_config: {}
gcode:

[gcode_macro _homing_debug]
gcode:
	{% set verbose = printer["gcode_macro _km_globals"].homing_verbose|default(0)|int %} 
	{% set lvl = params.LVL|default(0)|int %}
	{% set msg = params.msg|default("")|string %}
      	{% if 'lvl' <= verbose %}
		RESPOND PREFIX="// homing_override" msg="{msg}"
	{% endif %}


[homing_override]
axes: xyz
#set_position_z: 0
gcode:

  {% set cfg = printer["gcode_macro _HOME_DATA"].config %} 
  {% set sensorless_axes = printer["gcode_macro _HOME_DATA"].sensorless_axes %} 
  {% set distances = printer['gcode_macro _km_globals'].homing_distances %}
  {% set mult = printer['gcode_macro _km_globals'].homing_current %}
  {% if not printer["gcode_macro _HOME_DATA"].init %}
    {% set sensorless_axes = printer['gcode_macro _km_globals'].homing_sensorless_axes|upper|list %}

    {% for name in printer.configfile.settings %}
      {% if 'tmc' in name|lower%}
        {% if 'stepper_' in name|lower %}
          {% set dummy, axis = name.split('_') %} 
          {% if axis|upper in sensorless_axes %}
            {% set cfg_a = dict() %} 
            {% set dummy = cfg_a.update({"run_current": printer.configfile.settings[name].run_current}) %} 
            {% set dummy = cfg_a.update({"home_current": printer.configfile.settings[name].run_current * mult} ) %} 
            {% set dummy = cfg_a.update({"delay": printer['gcode_macro _km_globals'].homing_delay|float} ) %} 
            {% set dummy = cfg_a.update({"retract": printer['gcode_macro _km_globals'].homing_retract|float} ) %} 
            {% set dummy = cfg.update({axis|upper: cfg_a}) %} 
          {% endif %}
        {% endif %}

      {% endif %}
    {% endfor %}
    
    SET_GCODE_VARIABLE MACRO=_HOME_DATA VARIABLE=sensorless_axes VALUE="{sensorless_axes}"
    SET_GCODE_VARIABLE MACRO=_HOME_DATA VARIABLE=config VALUE="{cfg}"
    SET_GCODE_VARIABLE MACRO=_HOME_DATA VARIABLE=init VALUE="True"

  {% endif %}
  
  {% set axes = 'XYZ'|select('in', params|upper)|list %}
  {% set axes_current = sensorless_axes|join("")|select('in', axes)|list %}
  

  {% set check_args = [] %}
  {% for axis in distances %}
    {% set stepper_cfg = printer.configfile.settings['stepper_%s' % axis|lower] %}
   
    {% if axis not in printer.toolhead.homed_axes|upper|list or axis in axes %}
      _homing_debug lvl=1 msg="Homing {axis} as distance is required!"
      G28.6245197 {axis}
      G91
      {% set dummy = '%s%s%f F%f' % (axis, '-' if stepper_cfg.homing_positive_dir else '+', stepper_cfg.homing_retract_dist, stepper_cfg.homing_retract_speed * 60) %}
      G1 {dummy}
      G90

      {% if axis in axes %}
        _homing_debug lvl=2 msg="removing {axis} from list!"
        {% set dummy = axes.remove(axis) %} 
      {% endif %}

    {% endif %}
 
    {% for dir in distances[axis] %}
      {% set dummy = check_args.append("%s_%s=%f" % (axis|upper, dir|upper, distances[axis][dir])) %} 
    {% endfor %}
  {% endfor %}
  {% if check_args|length %}
    _CHECK_POS {check_args|join(' ')}
  {% endif %}

  {% for axis in axes %}
    {% set stepper_cfg = printer.configfile.settings['stepper_%s' % axis|lower] %}
    _homing_debug lvl=1 msg="HOMING {axis}"
    {% if axis in sensorless_axes %}
      RESPOND PREFIX="// homing_override" msg="{'%s -> setting homing current' % (axis) }"
      SET_TMC_CURRENT STEPPER="stepper_{axis|lower}" CURRENT={cfg[axis|upper].home_current}
    {% endif %}
    G28.6245197 {axis}
    {% if axis in sensorless_axes %}
      G91
      {% set dummy = '%s%s%f F%f' % (axis, '-' if stepper_cfg.homing_positive_dir else '+', cfg[axis|upper].retract, stepper_cfg.homing_retract_speed * 60) %}
      G1 {dummy}
      _homing_debug lvl=1 msg="{'%s -> resetting current' % (axis) }"
      SET_TMC_CURRENT STEPPER="stepper_{axis|lower}" CURRENT={cfg[axis|upper].run_current}

      G4 P{cfg[axis|upper].delay * 1500}
      G90
    {% endif %}
  {% endfor %}

